{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","api/index.js","images/image.png","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","duration","Date","toDateString","Chart","dailyData","country","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","countriesList","handleCountryChange","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","nativeSelect","i","url","fetchData","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","total","reportDate","fetchCountries","countries","name","App","useState","setData","setDailyData","setCountry","setCountriesList","useEffect","dataAPI","dailyDataAPI","countriesListAPI","src","coronaImage","image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0b2c641.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport styles from \"./Cards.module.css\";\nimport cx from \"classnames\";\nimport CountUp from \"react-countup\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                separator=\",\"\n                duration={2.5}\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                separator=\",\"\n                duration={2.5}\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                separator=\",\"\n                duration={2.5}\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data, dailyData, country }) => {\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n  const barChart = data.confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"people\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current State in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({ countriesList, handleCountryChange }) => {\n  return (\n    <div className={styles.container}>\n      <FormControl className={styles.formControl}>\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => {\n            handleCountryChange(e.target.value);\n          }}\n          className={styles.nativeSelect}\n        >\n          <option value=\"\">Global</option>\n          {countriesList.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    const modifiedData = { confirmed, recovered, deaths, lastUpdate };\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      date: dailyData.reportDate,\n      deaths: dailyData.deaths.total,\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { useEffect, useState } from \"react\";\n// Component\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\n// API\nimport { fetchData, fetchCountries, fetchDailyData } from \"./api\";\n// style\nimport styles from \"./App.module.css\";\n// Top image\nimport coronaImage from \"./images/image.png\";\n\nconst App = () => {\n  const [data, setData] = useState({}); // if country state is null global corona data, else country corona data\n  const [dailyData, setDailyData] = useState([]); // corona data by date\n  const [country, setCountry] = useState(\"\"); // Country that picked on CountryPicker\n  const [countriesList, setCountriesList] = useState([]); // Whole countries list\n\n  useEffect(() => {\n    // Get and Set Current Global Corona data (infected, recovered, deaths, last update date)\n    const dataAPI = async () => {\n      setData(await fetchData());\n    };\n    // Get and Set Corona Data by date\n    const dailyDataAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    // Get and Set Countries List\n    const countriesListAPI = async () => {\n      setCountriesList(await fetchCountries());\n    };\n    countriesListAPI();\n    dailyDataAPI();\n    dataAPI();\n  }, []);\n  // handle Country Change Event\n  const handleCountryChange = async (country) => {\n    setData(await fetchData(country));\n    setCountry(country);\n  };\n  return (\n    <div className={styles.container}>\n      <img src={coronaImage} className={styles.image} alt=\"COVID-19\" />\n      <Cards data={data} />\n      <CountryPicker\n        countriesList={countriesList}\n        handleCountryChange={handleCountryChange}\n      />\n      <Chart data={data} dailyData={dailyData} country={country} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};"],"sourceRoot":""}